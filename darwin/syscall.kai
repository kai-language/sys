// derived from: FreeBSD syscalls.master

Syscall :: enum u32 {
    Read  :: 3  // { user_ssize_t read(int fd, user_addr_t cbuf, user_size_t nbyte); }
    Write :: 4  // { user_ssize_t write(int fd, user_addr_t cbuf, user_size_t nbyte); }
    Open  :: 5  // { int open(user_addr_t path, int flags, int mode) NO_SYSCALL_STUB; }
    Close :: 6  // { int close(int fd); }
    Wait  :: 7  // { int wait4(int pid, user_addr_t status, int options, user_addr_t rusage) NO_SYSCALL_STUB; }
}

syscall0 :: fn(call: Syscall) -> u64 {
    return #asm("syscall", "={rax},{rax}", call)
}

syscall1 :: fn(call: Syscall, arg1: u64) -> u64 {
    return #asm("syscall", "={rax},{rax},{rdi}", call, arg1)
}

syscall2 :: fn(call: Syscall, arg1: u64, arg2: u64) -> u64 {
    return #asm("syscall", "={rax},{rax},{rdi},{rsi}", call, arg1, arg2)
}

syscall3 :: fn(call: Syscall, arg1: u64, arg2: u64, arg3: u64) -> u64 {
    return #asm("syscall", "={rax},{rax},{rdi},{rsi},{rdx}", call, arg1, arg2, arg3)
}

syscall4 :: fn(call: Syscall, arg1: u64, arg2: u64, arg3: u64, arg4: u64) -> u64 {
    return #asm("syscall", "={rax},{rax},{rdi},{rsi},{rdx},{r10}", call, arg1, arg2, arg3, arg4)
}

syscall5 :: fn(call: Syscall, arg1: u64, arg2: u64, arg3: u64, arg4: u64, arg5: u64) -> u64 {
    return #asm("syscall", "={rax},{rax},{rdi},{rsi},{rdx},{r10},{r8}", call, arg1, arg2, arg3, arg4, arg5)
}

syscall6 :: fn(call: Syscall, arg1: u64, arg2: u64, arg3: u64, arg4: u64, arg5: u64, arg6: u64) -> u64 {
    return #asm("syscall", "={rax},{rax},{rdi},{rsi},{rdx},{r10},{r8},{r9}", call, arg1, arg2, arg3, arg4, arg5, arg6)
}

/*
0	{ int nosys(void); }
1	{ void exit(int rval) NO_SYSCALL_STUB; }
2	{ int fork(void) NO_SYSCALL_STUB; }
3	{ user_ssize_t read(int fd, user_addr_t cbuf, user_size_t nbyte); }
4	{ user_ssize_t write(int fd, user_addr_t cbuf, user_size_t nbyte); }
5	{ int open(user_addr_t path, int flags, int mode) NO_SYSCALL_STUB; }
6	{ int close(int fd); }
7	{ int wait4(int pid, user_addr_t status, int options, user_addr_t rusage) NO_SYSCALL_STUB; }
8	{ int enosys(void); }
9	{ int link(user_addr_t path, user_addr_t link); }
10	{ int unlink(user_addr_t path) NO_SYSCALL_STUB; }
11	{ int enosys(void); }
12	{ int chdir(user_addr_t path); }
13	{ int fchdir(int fd); }
14	{ int mknod(user_addr_t path, int mode, int dev); }
15	{ int chmod(user_addr_t path, int mode) NO_SYSCALL_STUB; }
16	{ int chown(user_addr_t path, int uid, int gid); }
17	{ int enosys(void); }
18	{ int getfsstat(user_addr_t buf, int bufsize, int flags); }
19	{ int enosys(void); }
20	{ int getpid(void); }
21	{ int enosys(void); }
22	{ int enosys(void); }
23	{ int setuid(uid_t uid); }
24	{ int getuid(void); }
25	{ int geteuid(void); }
26	{ int ptrace(int req, pid_t pid, caddr_t addr, int data); }
27	{ int recvmsg(int s, struct msghdr *msg, int flags) NO_SYSCALL_STUB; }
28	{ int sendmsg(int s, caddr_t msg, int flags) NO_SYSCALL_STUB; }
29	{ int recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, int *fromlenaddr) NO_SYSCALL_STUB; }
30	{ int accept(int s, caddr_t name, socklen_t	*anamelen) NO_SYSCALL_STUB; }
31	{ int getpeername(int fdes, caddr_t asa, socklen_t *alen) NO_SYSCALL_STUB; }
32	{ int getsockname(int fdes, caddr_t asa, socklen_t *alen) NO_SYSCALL_STUB; }
33	{ int access(user_addr_t path, int flags); }
34	{ int chflags(char *path, int flags); }
35	{ int fchflags(int fd, int flags); }
36	{ int sync(void); }
37	{ int kill(int pid, int signum, int posix) NO_SYSCALL_STUB; }
38	{ int nosys(void); }
39	{ int getppid(void); }
40	{ int nosys(void); }
41	{ int dup(u_int fd); }
42	{ int pipe(void); }
43	{ int getegid(void); }
44	{ int nosys(void); }
45	{ int nosys(void); }
46	{ int sigaction(int signum, struct __sigaction *nsa, struct sigaction *osa) NO_SYSCALL_STUB; }
47	{ int getgid(void); }
48	{ int sigprocmask(int how, user_addr_t mask, user_addr_t omask); }
49	{ int getlogin(char *namebuf, u_int namelen) NO_SYSCALL_STUB; }
50	{ int setlogin(char *namebuf) NO_SYSCALL_STUB; }
51	{ int acct(char *path); }
52	{ int sigpending(struct sigvec *osv); }
53	{ int sigaltstack(struct sigaltstack *nss, struct sigaltstack *oss) NO_SYSCALL_STUB ; }
54	{ int ioctl(int fd, u_long com, caddr_t data) NO_SYSCALL_STUB; }
55	{ int reboot(int opt, char *command); }
56	{ int revoke(char *path); }
57	{ int symlink(char *path, char *link); }
58	{ int readlink(char *path, char *buf, int count); }
59	{ int execve(char *fname, char **argp, char **envp); }
60	{ int umask(int newmask); }
61	{ int chroot(user_addr_t path); }
62	{ int nosys(void); }
63	{ int nosys(void); }
64	{ int nosys(void); }
65	{ int msync(caddr_t addr, size_t len, int flags) NO_SYSCALL_STUB; }
66	{ int vfork(void); }
67	{ int nosys(void); }
68	{ int nosys(void); }
69	{ int nosys(void); }
70	{ int nosys(void); }
71	{ int nosys(void); }
72	{ int nosys(void); }
73	{ int munmap(caddr_t addr, size_t len) NO_SYSCALL_STUB; }
74	{ int mprotect(caddr_t addr, size_t len, int prot) NO_SYSCALL_STUB; }
75	{ int madvise(caddr_t addr, size_t len, int behav); }
76	{ int nosys(void); }
77	{ int nosys(void); }
78	{ int mincore(user_addr_t addr, user_size_t len, user_addr_t vec); }
79	{ int getgroups(u_int gidsetsize, gid_t *gidset); }
80	{ int setgroups(u_int gidsetsize, gid_t *gidset); }
81	{ int getpgrp(void); }
82	{ int setpgid(int pid, int pgid); }
83	{ int setitimer(u_int which, struct itimerval *itv, struct itimerval *oitv); }
84	{ int nosys(void); }
85	{ int swapon(void); }
86	{ int getitimer(u_int which, struct itimerval *itv); }
87	{ int nosys(void); }
88	{ int nosys(void); }
89	{ int getdtablesize(void); }
90	{ int dup2(u_int from, u_int to); }
91	{ int nosys(void); }
92	{ int fcntl(int fd, int cmd, long arg) NO_SYSCALL_STUB; }
93	{ int select(int nd, u_int32_t *in, u_int32_t *ou, u_int32_t *ex, struct timeval *tv) NO_SYSCALL_STUB; }
94	{ int nosys(void); }
95	{ int fsync(int fd); }
96	{ int setpriority(int which, id_t who, int prio) NO_SYSCALL_STUB; }
97	{ int socket(int domain, int type, int protocol); }
98	{ int connect(int s, caddr_t name, socklen_t namelen) NO_SYSCALL_STUB; }
99	{ int nosys(void); }
100	{ int getpriority(int which, id_t who); }
101	{ int nosys(void); }
102	{ int nosys(void); }
103	{ int nosys(void); }
104	{ int bind(int s, caddr_t name, socklen_t namelen) NO_SYSCALL_STUB; }
105	{ int setsockopt(int s, int level, int name, caddr_t val, socklen_t valsize); }
106	{ int listen(int s, int backlog) NO_SYSCALL_STUB; }
107	{ int nosys(void); }
108	{ int nosys(void); }
109	{ int nosys(void); }
110	{ int nosys(void); }
111	{ int sigsuspend(sigset_t mask) NO_SYSCALL_STUB; }
112	{ int nosys(void); }
113	{ int nosys(void); }
114	{ int nosys(void); }
115	{ int nosys(void); }
116	{ int gettimeofday(struct timeval *tp, struct timezone *tzp, uint64_t *mach_absolute_time) NO_SYSCALL_STUB; }
117	{ int getrusage(int who, struct rusage *rusage); }
118	{ int getsockopt(int s, int level, int name, caddr_t val, socklen_t *avalsize); }
119	{ int nosys(void); }
120	{ user_ssize_t readv(int fd, struct iovec *iovp, u_int iovcnt); }
121	{ user_ssize_t writev(int fd, struct iovec *iovp, u_int iovcnt); }
122	{ int settimeofday(struct timeval *tv, struct timezone *tzp) NO_SYSCALL_STUB; }
123	{ int fchown(int fd, int uid, int gid); }
124	{ int fchmod(int fd, int mode) NO_SYSCALL_STUB; }
125	{ int nosys(void); }
126	{ int setreuid(uid_t ruid, uid_t euid) NO_SYSCALL_STUB; }
127	{ int setregid(gid_t rgid, gid_t egid) NO_SYSCALL_STUB; }
128	{ int rename(char *from, char *to) NO_SYSCALL_STUB; }
129	{ int nosys(void); }
130	{ int nosys(void); }
131	{ int flock(int fd, int how); }
132	{ int mkfifo(user_addr_t path, int mode); }
133	{ int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, socklen_t tolen) NO_SYSCALL_STUB; }
134	{ int shutdown(int s, int how); }
135	{ int socketpair(int domain, int type, int protocol, int *rsv) NO_SYSCALL_STUB; }
136	{ int mkdir(user_addr_t path, int mode); }
137	{ int rmdir(char *path) NO_SYSCALL_STUB; }
138	{ int utimes(char *path, struct timeval *tptr); }
139	{ int futimes(int fd, struct timeval *tptr); }
140	{ int adjtime(struct timeval *delta, struct timeval *olddelta); }
141	{ int nosys(void); }
142	{ int gethostuuid(unsigned char *uuid_buf, const struct timespec *timeoutp, int spi) NO_SYSCALL_STUB; }
143	{ int nosys(void); }
144	{ int nosys(void); }
145	{ int nosys(void); }
146	{ int nosys(void); }
147	{ int setsid(void); }
148	{ int nosys(void); }
149	{ int nosys(void); }
150	{ int nosys(void); }
151	{ int getpgid(pid_t pid); }
152	{ int setprivexec(int flag); }
153	{ user_ssize_t pread(int fd, user_addr_t buf, user_size_t nbyte, off_t offset); }
154	{ user_ssize_t pwrite(int fd, user_addr_t buf, user_size_t nbyte, off_t offset); }
155	{ int nfssvc(int flag, caddr_t argp); }
156	{ int nosys(void); }
157	{ int statfs(char *path, struct statfs *buf); }
158	{ int fstatfs(int fd, struct statfs *buf); }
159	{ int unmount(user_addr_t path, int flags); }
160	{ int nosys(void); }
161	{ int getfh(char *fname, fhandle_t *fhp); }
162	{ int nosys(void); }
163	{ int nosys(void); }
164	{ int nosys(void); }
165	{ int quotactl(const char *path, int cmd, int uid, caddr_t arg); }
166	{ int nosys(void); }
167	{ int mount(char *type, char *path, int flags, caddr_t data); }
168	{ int nosys(void); }
169	{ int csops(pid_t pid, uint32_t ops, user_addr_t useraddr, user_size_t usersize); }
170	{ int csops_audittoken(pid_t pid, uint32_t ops, user_addr_t useraddr, user_size_t usersize, user_addr_t uaudittoken); }
171	{ int nosys(void); }
172	{ int nosys(void); }
173	{ int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options); }
174	{ int nosys(void); }
175	{ int nosys(void); }
176	{ int nosys(void); }
177	{ int kdebug_typefilter(void** addr, size_t* size) NO_SYSCALL_STUB; }
178	{ uint64_t kdebug_trace_string(uint32_t debugid, uint64_t str_id, const char *str) NO_SYSCALL_STUB; }
179	{ int kdebug_trace64(uint32_t code, uint64_t arg1, uint64_t arg2, uint64_t arg3, uint64_t arg4) NO_SYSCALL_STUB; }
180	{ int kdebug_trace(uint32_t code, u_long arg1, u_long arg2, u_long arg3, u_long arg4) NO_SYSCALL_STUB; }
181	{ int setgid(gid_t gid); }
182	{ int setegid(gid_t egid); }
183	{ int seteuid(uid_t euid); }
184	{ int sigreturn(struct ucontext *uctx, int infostyle) NO_SYSCALL_STUB; }
185	{ int enosys(void); }
186	{ int thread_selfcounts(int type, user_addr_t buf, user_size_t nbytes); }
187	{ int fdatasync(int fd); }
188	{ int stat(user_addr_t path, user_addr_t ub); }
189	{ int fstat(int fd, user_addr_t ub); }
190	{ int lstat(user_addr_t path, user_addr_t ub); }
191	{ int pathconf(char *path, int name); }
192	{ int fpathconf(int fd, int name); }
193	{ int nosys(void); }
194	{ int getrlimit(u_int which, struct rlimit *rlp) NO_SYSCALL_STUB; }
195	{ int setrlimit(u_int which, struct rlimit *rlp) NO_SYSCALL_STUB; }
196	{ int getdirentries(int fd, char *buf, u_int count, long *basep); }
197	{ user_addr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t pos) NO_SYSCALL_STUB; }
198	{ int nosys(void); }
199	{ off_t lseek(int fd, off_t offset, int whence); }
200	{ int truncate(char *path, off_t length); }
201	{ int ftruncate(int fd, off_t length); }
202	{ int sysctl(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen) NO_SYSCALL_STUB; }
203	{ int mlock(caddr_t addr, size_t len); }
204	{ int munlock(caddr_t addr, size_t len); }
205	{ int undelete(user_addr_t path); }
206	{ int nosys(void); }
207	{ int nosys(void); }
208	{ int nosys(void); }
209	{ int nosys(void); }
210	{ int nosys(void); }
211	{ int nosys(void); }
212	{ int nosys(void); }
213	{ int nosys(void); }
214	{ int nosys(void); }
215	{ int nosys(void); }
216	{ int open_dprotected_np(user_addr_t path, int flags, int class, int dpflags, int mode) NO_SYSCALL_STUB; }
217	{ int nosys(void); }
218	{ int nosys(void); }
219	{ int nosys(void); }
220	{ int getattrlist(const char *path, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options) NO_SYSCALL_STUB; }
221	{ int setattrlist(const char *path, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options) NO_SYSCALL_STUB; }
222	{ int getdirentriesattr(int fd, struct attrlist *alist, void *buffer, size_t buffersize, u_long *count, u_long *basep, u_long *newstate, u_long options); }
223	{ int exchangedata(const char *path1, const char *path2, u_long options); }
224 { int nosys(void); }
225	{ int searchfs(const char *path, struct fssearchblock *searchblock, uint32_t *nummatches, uint32_t scriptcode, uint32_t options, struct searchstate *state); }
226	{ int delete(user_addr_t path) NO_SYSCALL_STUB; }
227	{ int copyfile(char *from, char *to, int mode, int flags) NO_SYSCALL_STUB; }
228	{ int fgetattrlist(int fd, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options); }
229	{ int fsetattrlist(int fd, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options); }
230	{ int poll(struct pollfd *fds, u_int nfds, int timeout); }
231	{ int watchevent(struct eventreq *u_req, int u_eventmask); }
232	{ int waitevent(struct eventreq *u_req, struct timeval *tv); }
233	{ int modwatch(struct eventreq *u_req, int u_eventmask); }
234	{ user_ssize_t getxattr(user_addr_t path, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
235	{ user_ssize_t fgetxattr(int fd, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
236	{ int setxattr(user_addr_t path, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
237	{ int fsetxattr(int fd, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
238	{ int removexattr(user_addr_t path, user_addr_t attrname, int options); }
239	{ int fremovexattr(int fd, user_addr_t attrname, int options); }
240	{ user_ssize_t listxattr(user_addr_t path, user_addr_t namebuf, size_t bufsize, int options); }
241	{ user_ssize_t flistxattr(int fd, user_addr_t namebuf, size_t bufsize, int options); }
242	{ int fsctl(const char *path, u_long cmd, caddr_t data, u_int options); }
243	{ int initgroups(u_int gidsetsize, gid_t *gidset, int gmuid) NO_SYSCALL_STUB; }
244	{ int posix_spawn(pid_t *pid, const char *path, const struct _posix_spawn_args_desc *adesc, char **argv, char **envp) NO_SYSCALL_STUB; }
245	{ int ffsctl(int fd, u_long cmd, caddr_t data, u_int options); }
246	{ int nosys(void); }
247	{ int nfsclnt(int flag, caddr_t argp); }
248	{ int fhopen(const struct fhandle *u_fhp, int flags); }
249	{ int nosys(void); }
250	{ int minherit(void *addr, size_t len, int inherit); }
251	{ int semsys(u_int which, int a2, int a3, int a4, int a5) NO_SYSCALL_STUB; }
252	{ int msgsys(u_int which, int a2, int a3, int a4, int a5) NO_SYSCALL_STUB; }
253	{ int shmsys(u_int which, int a2, int a3, int a4) NO_SYSCALL_STUB; }
254	{ int semctl(int semid, int semnum, int cmd, semun_t arg) NO_SYSCALL_STUB; }
255	{ int semget(key_t key, int	nsems, int semflg); }
256	{ int semop(int semid, struct sembuf *sops, int nsops); }
257	{ int nosys(void); }
258	{ int msgctl(int msqid, int cmd, struct	msqid_ds *buf) NO_SYSCALL_STUB; }
259	{ int msgget(key_t key, int msgflg); }
260	{ int msgsnd(int msqid, void *msgp, size_t msgsz, int msgflg); }
261	{ user_ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }
262	{ user_addr_t shmat(int shmid, void *shmaddr, int shmflg); }
263	{ int shmctl(int shmid, int cmd, struct shmid_ds *buf) NO_SYSCALL_STUB; }
264	{ int shmdt(void *shmaddr); }
265	{ int shmget(key_t key, size_t size, int shmflg); }
266	{ int shm_open(const char *name, int oflag, int mode) NO_SYSCALL_STUB; }
267	{ int shm_unlink(const char *name); }
268	{ user_addr_t sem_open(const char *name, int oflag, int mode, int value) NO_SYSCALL_STUB; }
269	{ int sem_close(sem_t *sem); }
270	{ int sem_unlink(const char *name); }
271	{ int sem_wait(sem_t *sem); }
272	{ int sem_trywait(sem_t *sem); }
273	{ int sem_post(sem_t *sem); }
274 { int sysctlbyname(const char *name, size_t namelen, void *old, size_t *oldlenp, void *new, size_t newlen) NO_SYSCALL_STUB; }
275	{ int enosys(void); }
276	{ int enosys(void); }
277	{ int open_extended(user_addr_t path, int flags, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
278	{ int umask_extended(int newmask, user_addr_t xsecurity) NO_SYSCALL_STUB; }
279	{ int stat_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
280	{ int lstat_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
281	{ int fstat_extended(int fd, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
282	{ int chmod_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
283	{ int fchmod_extended(int fd, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
284	{ int access_extended(user_addr_t entries, size_t size, user_addr_t results, uid_t uid) NO_SYSCALL_STUB; }
285	{ int settid(uid_t uid, gid_t gid) NO_SYSCALL_STUB; }
286	{ int gettid(uid_t *uidp, gid_t *gidp) NO_SYSCALL_STUB; }
287	{ int setsgroups(int setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
288	{ int getsgroups(user_addr_t setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
289	{ int setwgroups(int setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
290	{ int getwgroups(user_addr_t setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
291	{ int mkfifo_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
292	{ int mkdir_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
293	{ int identitysvc(int opcode, user_addr_t message) NO_SYSCALL_STUB; }
294	{ int shared_region_check_np(uint64_t *start_address) NO_SYSCALL_STUB; }
295	{ int nosys(void); }
296	{ int vm_pressure_monitor(int wait_for_pressure, int nsecs_monitored, uint32_t *pages_reclaimed); }
297	{ uint32_t psynch_rw_longrdlock(user_addr_t rwlock, uint32_t lgenval, uint32_t ugenval, uint32_t rw_wc, int flags)  NO_SYSCALL_STUB; }
298	{ uint32_t psynch_rw_yieldwrlock(user_addr_t rwlock, uint32_t lgenval, uint32_t ugenval, uint32_t rw_wc, int flags)  NO_SYSCALL_STUB; }
299	{ int psynch_rw_downgrade(user_addr_t rwlock, uint32_t lgenval, uint32_t ugenval, uint32_t rw_wc, int flags)  NO_SYSCALL_STUB; }
300	{ uint32_t psynch_rw_upgrade(user_addr_t rwlock, uint32_t lgenval, uint32_t ugenval, uint32_t rw_wc, int flags)  NO_SYSCALL_STUB; }
301	{ uint32_t psynch_mutexwait(user_addr_t mutex,  uint32_t mgen, uint32_t  ugen, uint64_t tid, uint32_t flags) NO_SYSCALL_STUB; }
302	{ uint32_t psynch_mutexdrop(user_addr_t mutex,  uint32_t mgen, uint32_t  ugen, uint64_t tid, uint32_t flags) NO_SYSCALL_STUB; }
303	{ uint32_t psynch_cvbroad(user_addr_t cv, uint64_t cvlsgen, uint64_t cvudgen, uint32_t flags, user_addr_t mutex,  uint64_t mugen, uint64_t tid) NO_SYSCALL_STUB; }
304	{ uint32_t psynch_cvsignal(user_addr_t cv, uint64_t cvlsgen, uint32_t cvugen, int thread_port, user_addr_t mutex,  uint64_t mugen, uint64_t tid, uint32_t flags) NO_SYSCALL_STUB; }
305	{ uint32_t psynch_cvwait(user_addr_t cv, uint64_t cvlsgen, uint32_t cvugen, user_addr_t mutex,  uint64_t mugen, uint32_t flags, int64_t sec, uint32_t nsec) NO_SYSCALL_STUB; }
306	{ uint32_t psynch_rw_rdlock(user_addr_t rwlock, uint32_t lgenval, uint32_t ugenval, uint32_t rw_wc, int flags)  NO_SYSCALL_STUB; }
307	{ uint32_t psynch_rw_wrlock(user_addr_t rwlock, uint32_t lgenval, uint32_t ugenval, uint32_t rw_wc, int flags)  NO_SYSCALL_STUB; }
308	{ uint32_t psynch_rw_unlock(user_addr_t rwlock, uint32_t lgenval, uint32_t ugenval, uint32_t rw_wc, int flags)  NO_SYSCALL_STUB; }
309	{ uint32_t psynch_rw_unlock2(user_addr_t rwlock, uint32_t lgenval, uint32_t ugenval, uint32_t rw_wc, int flags)  NO_SYSCALL_STUB; }
310	{ int getsid(pid_t pid); }
311	{ int settid_with_pid(pid_t pid, int assume) NO_SYSCALL_STUB; }
312	{ int psynch_cvclrprepost(user_addr_t cv, uint32_t cvgen, uint32_t cvugen, uint32_t cvsgen, uint32_t prepocnt, uint32_t preposeq, uint32_t flags) NO_SYSCALL_STUB; }
313	{ int aio_fsync(int op, user_addr_t aiocbp); }
314	{ user_ssize_t aio_return(user_addr_t aiocbp); }
315	{ int aio_suspend(user_addr_t aiocblist, int nent, user_addr_t timeoutp); }
316	{ int aio_cancel(int fd, user_addr_t aiocbp); }
317	{ int aio_error(user_addr_t aiocbp); }
318	{ int aio_read(user_addr_t aiocbp); }
319	{ int aio_write(user_addr_t aiocbp); }
320	{ int lio_listio(int mode, user_addr_t aiocblist, int nent, user_addr_t sigp); }
321	{ int nosys(void); }
322	{ int iopolicysys(int cmd, void *arg) NO_SYSCALL_STUB; }
323	{ int process_policy(int scope, int action, int policy, int policy_subtype, user_addr_t attrp, pid_t target_pid, uint64_t target_threadid) NO_SYSCALL_STUB; }
324	{ int mlockall(int how); }
325	{ int munlockall(int how); }
326	{ int nosys(void); }
327	{ int issetugid(void); }
328	{ int __pthread_kill(int thread_port, int sig); }
329	{ int __pthread_sigmask(int how, user_addr_t set, user_addr_t oset); }
330	{ int __sigwait(user_addr_t set, user_addr_t sig); }
331	{ int __disable_threadsignal(int value); }
332	{ int __pthread_markcancel(int thread_port); }
333	{ int __pthread_canceled(int  action); }
334 { int __semwait_signal(int cond_sem, int mutex_sem, int timeout, int relative, int64_t tv_sec, int32_t tv_nsec); }
335	{ int nosys(void); }
336	{ int proc_info(int32_t callnum,int32_t pid,uint32_t flavor, uint64_t arg,user_addr_t buffer,int32_t buffersize) NO_SYSCALL_STUB; }
337	{ int sendfile(int fd, int s, off_t offset, off_t *nbytes, struct sf_hdtr *hdtr, int flags); }
338	{ int stat64(user_addr_t path, user_addr_t ub); }
339	{ int fstat64(int fd, user_addr_t ub); }
340	{ int lstat64(user_addr_t path, user_addr_t ub); }
341	{ int stat64_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
342	{ int lstat64_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
343	{ int fstat64_extended(int fd, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
344	{ user_ssize_t getdirentries64(int fd, void *buf, user_size_t bufsize, off_t *position) NO_SYSCALL_STUB; }
345	{ int statfs64(char *path, struct statfs64 *buf); }
346	{ int fstatfs64(int fd, struct statfs64 *buf); }
347	{ int getfsstat64(user_addr_t buf, int bufsize, int flags); }
348	{ int __pthread_chdir(user_addr_t path); }
349	{ int __pthread_fchdir(int fd); }
350	{ int audit(void *record, int length); }
351	{ int auditon(int cmd, void *data, int length); }
352	{ int nosys(void); }
353	{ int getauid(au_id_t *auid); }
354	{ int setauid(au_id_t *auid); }
355	{ int nosys(void); }
356	{ int nosys(void); }
357	{ int getaudit_addr(struct auditinfo_addr *auditinfo_addr, int length); }
358	{ int setaudit_addr(struct auditinfo_addr *auditinfo_addr, int length); }
359	{ int auditctl(char *path); }
360	{ user_addr_t bsdthread_create(user_addr_t func, user_addr_t func_arg, user_addr_t stack, user_addr_t pthread, uint32_t flags) NO_SYSCALL_STUB; }
361	{ int bsdthread_terminate(user_addr_t stackaddr, size_t freesize, uint32_t port, uint32_t sem) NO_SYSCALL_STUB; }
362	{ int kqueue(void); }
363	{ int kevent(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }
364	{ int lchown(user_addr_t path, uid_t owner, gid_t group) NO_SYSCALL_STUB; }
365	{ int nosys(void); }
366	{ int bsdthread_register(user_addr_t threadstart, user_addr_t wqthread, uint32_t flags, user_addr_t stack_addr_hint, user_addr_t targetconc_ptr, uint32_t dispatchqueue_offset, uint32_t tsd_offset) NO_SYSCALL_STUB; }
367	{ int workq_open(void) NO_SYSCALL_STUB; }
368	{ int workq_kernreturn(int options, user_addr_t item, int affinity, int prio) NO_SYSCALL_STUB; }
369	{ int kevent64(int fd, const struct kevent64_s *changelist, int nchanges, struct kevent64_s *eventlist, int nevents, unsigned int flags, const struct timespec *timeout); }
370 { int nosys(void); }
371 { int nosys(void); }
372	{ uint64_t thread_selfid (void) NO_SYSCALL_STUB; }
373	{ int ledger(int cmd, caddr_t arg1, caddr_t arg2, caddr_t arg3); }
374	{ int kevent_qos(int fd, const struct kevent_qos_s *changelist, int nchanges, struct kevent_qos_s *eventlist, int nevents, void *data_out, size_t *data_available, unsigned int flags); }
375	{ int kevent_id(uint64_t id, const struct kevent_qos_s *changelist, int nchanges, struct kevent_qos_s *eventlist, int nevents, void *data_out, size_t *data_available, unsigned int flags); }
376	{ int nosys(void); }
377	{ int nosys(void); }
378	{ int nosys(void); }
379	{ int nosys(void); }
380	{ int __mac_execve(char *fname, char **argp, char **envp, struct mac *mac_p); }
381 { int enosys(void); }
382 { int nosys(void); }
383 { int nosys(void); }
384 { int nosys(void); }
385 { int nosys(void); }
386 { int nosys(void); }
387 { int nosys(void); }
388 { int nosys(void); }
389 { int nosys(void); }
390 { int nosys(void); }
391	{ int enosys(void); }
392	{ int enosys(void); }
393	{ int enosys(void); }
394	{ int pselect(int nd, u_int32_t *in, u_int32_t *ou, u_int32_t *ex, const struct timespec *ts, const struct sigset_t *mask) NO_SYSCALL_STUB; }
395	{ int pselect_nocancel(int nd, u_int32_t *in, u_int32_t *ou, u_int32_t *ex, const struct timespec *ts, const struct sigset_t *mask) NO_SYSCALL_STUB; }
396	{ user_ssize_t read_nocancel(int fd, user_addr_t cbuf, user_size_t nbyte) NO_SYSCALL_STUB; }
397	{ user_ssize_t write_nocancel(int fd, user_addr_t cbuf, user_size_t nbyte) NO_SYSCALL_STUB; }
398	{ int open_nocancel(user_addr_t path, int flags, int mode) NO_SYSCALL_STUB; }
399	{ int close_nocancel(int fd) NO_SYSCALL_STUB; }
400	{ int wait4_nocancel(int pid, user_addr_t status, int options, user_addr_t rusage) NO_SYSCALL_STUB; }
401	{ int recvmsg_nocancel(int s, struct msghdr *msg, int flags) NO_SYSCALL_STUB; }
402	{ int sendmsg_nocancel(int s, caddr_t msg, int flags) NO_SYSCALL_STUB; }
403	{ int recvfrom_nocancel(int s, void *buf, size_t len, int flags, struct sockaddr *from, int *fromlenaddr) NO_SYSCALL_STUB; }
404	{ int accept_nocancel(int s, caddr_t name, socklen_t	*anamelen) NO_SYSCALL_STUB; }
405	{ int msync_nocancel(caddr_t addr, size_t len, int flags) NO_SYSCALL_STUB; }
406	{ int fcntl_nocancel(int fd, int cmd, long arg) NO_SYSCALL_STUB; }
407	{ int select_nocancel(int nd, u_int32_t *in, u_int32_t *ou, u_int32_t *ex, struct timeval *tv) NO_SYSCALL_STUB; }
408	{ int fsync_nocancel(int fd) NO_SYSCALL_STUB; }
409	{ int connect_nocancel(int s, caddr_t name, socklen_t namelen) NO_SYSCALL_STUB; }
410	{ int sigsuspend_nocancel(sigset_t mask) NO_SYSCALL_STUB; }
411	{ user_ssize_t readv_nocancel(int fd, struct iovec *iovp, u_int iovcnt) NO_SYSCALL_STUB; }
412	{ user_ssize_t writev_nocancel(int fd, struct iovec *iovp, u_int iovcnt) NO_SYSCALL_STUB; }
413	{ int sendto_nocancel(int s, caddr_t buf, size_t len, int flags, caddr_t to, socklen_t tolen) NO_SYSCALL_STUB; }
414	{ user_ssize_t pread_nocancel(int fd, user_addr_t buf, user_size_t nbyte, off_t offset) NO_SYSCALL_STUB; }
415	{ user_ssize_t pwrite_nocancel(int fd, user_addr_t buf, user_size_t nbyte, off_t offset) NO_SYSCALL_STUB; }
416	{ int waitid_nocancel(idtype_t idtype, id_t id, siginfo_t *infop, int options) NO_SYSCALL_STUB; }
417	{ int poll_nocancel(struct pollfd *fds, u_int nfds, int timeout) NO_SYSCALL_STUB; }
418	{ int msgsnd_nocancel(int msqid, void *msgp, size_t msgsz, int msgflg) NO_SYSCALL_STUB; }
419	{ user_ssize_t msgrcv_nocancel(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg) NO_SYSCALL_STUB; }
420	{ int sem_wait_nocancel(sem_t *sem) NO_SYSCALL_STUB; }
421	{ int aio_suspend_nocancel(user_addr_t aiocblist, int nent, user_addr_t timeoutp) NO_SYSCALL_STUB; }
422	{ int __sigwait_nocancel(user_addr_t set, user_addr_t sig) NO_SYSCALL_STUB; }
423 { int __semwait_signal_nocancel(int cond_sem, int mutex_sem, int timeout, int relative, int64_t tv_sec, int32_t tv_nsec); }
424	{ int __mac_mount(char *type, char *path, int flags, caddr_t data, struct mac *mac_p); }
425 { int nosys(void); }
426	{ int __mac_getfsstat(user_addr_t buf, int bufsize, user_addr_t mac, int macsize, int flags); }
427	{ user_ssize_t fsgetpath(user_addr_t buf, size_t bufsize, user_addr_t fsid, uint64_t objid); }
428	{ mach_port_name_t audit_session_self(void); }
429	{ int audit_session_join(mach_port_name_t port); }
430	{ int fileport_makeport(int fd, user_addr_t portnamep); }
431	{ int fileport_makefd(mach_port_name_t port); }
432	{ int audit_session_port(au_asid_t asid, user_addr_t portnamep); }
433	{ int pid_suspend(int pid); }
434	{ int pid_resume(int pid); }
435	{ int pid_hibernate(int pid); }
436	{ int pid_shutdown_sockets(int pid, int level); }
437	{ int nosys(void); }
438	{ int shared_region_map_and_slide_np(int fd, uint32_t count, const struct shared_file_mapping_np *mappings, uint32_t slide, uint64_t* slide_start, uint32_t slide_size) NO_SYSCALL_STUB; }
439	{ int kas_info(int selector, void *value, size_t *size); }
440	{ int memorystatus_control(uint32_t command, int32_t pid, uint32_t flags, user_addr_t buffer, size_t buffersize); }
441	{ int guarded_open_np(user_addr_t path, const guardid_t *guard, u_int guardflags, int flags, int mode) NO_SYSCALL_STUB; }
442	{ int guarded_close_np(int fd, const guardid_t *guard); }
443	{ int guarded_kqueue_np(const guardid_t *guard, u_int guardflags); }
444	{ int change_fdguard_np(int fd, const guardid_t *guard, u_int guardflags, const guardid_t *nguard, u_int nguardflags, int *fdflagsp); }
445	{ int usrctl(uint32_t flags); }
446	{ int proc_rlimit_control(pid_t pid, int flavor, void *arg); }
447	{ int connectx(int socket, const sa_endpoints_t *endpoints, sae_associd_t associd, unsigned int flags, const struct iovec *iov, unsigned int iovcnt, size_t *len, sae_connid_t *connid); }
448	{ int disconnectx(int s, sae_associd_t aid, sae_connid_t cid); }
449	{ int peeloff(int s, sae_associd_t aid); }
450	{ int socket_delegate(int domain, int type, int protocol, pid_t epid); }
451	{ int telemetry(uint64_t cmd, uint64_t deadline, uint64_t interval, uint64_t leeway, uint64_t arg4, uint64_t arg5) NO_SYSCALL_STUB; }
452	{ int proc_uuid_policy(uint32_t operation, uuid_t uuid, size_t uuidlen, uint32_t flags); }
453	{ int memorystatus_get_level(user_addr_t level); }
454	{ int system_override(uint64_t timeout, uint64_t flags); }
455	{ int vfs_purge(void); }
456	{ int sfi_ctl(uint32_t operation, uint32_t sfi_class, uint64_t time, uint64_t *out_time) NO_SYSCALL_STUB; }
457	{ int sfi_pidctl(uint32_t operation, pid_t pid, uint32_t sfi_flags, uint32_t *out_sfi_flags) NO_SYSCALL_STUB; }
458	{ int coalition(uint32_t operation, uint64_t *cid, uint32_t flags) NO_SYSCALL_STUB; }
459	{ int coalition_info(uint32_t flavor, uint64_t *cid, void *buffer, size_t *bufsize) NO_SYSCALL_STUB; }
460 { int necp_match_policy(uint8_t *parameters, size_t parameters_size, struct necp_aggregate_result *returned_result); }
461	{ int getattrlistbulk(int dirfd, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, uint64_t options); }
462 { int clonefileat(int src_dirfd, user_addr_t src, int dst_dirfd, user_addr_t dst, uint32_t flags); }
463	{ int openat(int fd, user_addr_t path, int flags, int mode) NO_SYSCALL_STUB; }
464	{ int openat_nocancel(int fd, user_addr_t path, int flags, int mode) NO_SYSCALL_STUB; }
465	{ int renameat(int fromfd, char *from, int tofd, char *to) NO_SYSCALL_STUB; }
466	{ int faccessat(int fd, user_addr_t path, int amode, int flag); }
467	{ int fchmodat(int fd, user_addr_t path, int mode, int flag); }
468	{ int fchownat(int fd, user_addr_t path, uid_t uid,gid_t gid, int flag); }
469	{ int fstatat(int fd, user_addr_t path, user_addr_t ub, int flag); }
470	{ int fstatat64(int fd, user_addr_t path, user_addr_t ub, int flag); }
471	{ int linkat(int fd1, user_addr_t path, int fd2, user_addr_t link, int flag); }
472	{ int unlinkat(int fd, user_addr_t path, int flag) NO_SYSCALL_STUB; }
473	{ int readlinkat(int fd, user_addr_t path, user_addr_t buf, size_t bufsize); }
474	{ int symlinkat(user_addr_t *path1, int fd, user_addr_t path2); }
475	{ int mkdirat(int fd, user_addr_t path, int mode); }
476	{ int getattrlistat(int fd, const char *path, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options); }
477	{ int proc_trace_log(pid_t pid, uint64_t uniqueid); }
478	{ int bsdthread_ctl(user_addr_t cmd, user_addr_t arg1, user_addr_t arg2, user_addr_t arg3) NO_SYSCALL_STUB; }
479	{ int openbyid_np(user_addr_t fsid, user_addr_t objid, int oflags); }
480	{ user_ssize_t recvmsg_x(int s, struct msghdr_x *msgp, u_int cnt, int flags); }
481	{ user_ssize_t sendmsg_x(int s, struct msghdr_x *msgp, u_int cnt, int flags); }
482	{ uint64_t thread_selfusage(void) NO_SYSCALL_STUB; }
483	{ int csrctl(uint32_t op, user_addr_t useraddr, user_addr_t usersize) NO_SYSCALL_STUB; }
484	{ int guarded_open_dprotected_np(user_addr_t path, const guardid_t *guard, u_int guardflags, int flags, int dpclass, int dpflags, int mode) NO_SYSCALL_STUB; }
485	{ user_ssize_t guarded_write_np(int fd, const guardid_t *guard, user_addr_t cbuf, user_size_t nbyte); }
486	{ user_ssize_t guarded_pwrite_np(int fd, const guardid_t *guard, user_addr_t buf, user_size_t nbyte, off_t offset); }
487	{ user_ssize_t guarded_writev_np(int fd, const guardid_t *guard, struct iovec *iovp, int iovcnt); }
488	{ int renameatx_np(int fromfd, char *from, int tofd, char *to, u_int flags) NO_SYSCALL_STUB; }
489	{ int mremap_encrypted(caddr_t addr, size_t len, uint32_t cryptid, uint32_t cputype, uint32_t cpusubtype); }
490	{ int netagent_trigger(uuid_t agent_uuid, size_t agent_uuidlen); }
491	{ int stack_snapshot_with_config(int stackshot_config_version, user_addr_t stackshot_config, size_t stackshot_config_size) NO_SYSCALL_STUB; }
492	{ int microstackshot(user_addr_t tracebuf, uint32_t tracebuf_size, uint32_t flags) NO_SYSCALL_STUB; }
493	{ user_ssize_t grab_pgo_data (user_addr_t uuid, int flags, user_addr_t buffer, user_ssize_t size); }
494	{ int persona(uint32_t operation, uint32_t flags, struct kpersona_info *info, uid_t *id, size_t *idlen) NO_SYSCALL_STUB; }
495	{ int enosys(void); }
496	{ int enosys(void); }
497	{ int enosys(void); }
498	{ int enosys(void); }
499	{ int work_interval_ctl(uint32_t operation, uint64_t work_interval_id, void *arg, size_t len) NO_SYSCALL_STUB; }
500	{ int getentropy(void *buffer, size_t size); }
501	{ int necp_open(int flags); }
502	{ int necp_client_action(int necp_fd, uint32_t action, uuid_t client_id, size_t client_id_len, uint8_t *buffer, size_t buffer_size); }
503	{ int enosys(void); }
504	{ int enosys(void); }
505	{ int enosys(void); }
506	{ int enosys(void); }
507	{ int enosys(void); }
508	{ int enosys(void); }
509	{ int enosys(void); }
510	{ int enosys(void); }
511	{ int enosys(void); }
512	{ int enosys(void); }
513	{ int enosys(void); }
514	{ int enosys(void); }
515	{ int ulock_wait(uint32_t operation, void *addr, uint64_t value, uint32_t timeout) NO_SYSCALL_STUB; }
516	{ int ulock_wake(uint32_t operation, void *addr, uint64_t wake_value) NO_SYSCALL_STUB; }
517 { int fclonefileat(int src_fd, int dst_dirfd, user_addr_t dst, uint32_t flags); }
518 { int fs_snapshot(uint32_t op, int dirfd, user_addr_t name1, user_addr_t name2, user_addr_t data, uint32_t flags) NO_SYSCALL_STUB; }
519	{ int enosys(void); }
520	{ int terminate_with_payload(int pid, uint32_t reason_namespace, uint64_t reason_code, void *payload, uint32_t payload_size, const char *reason_string, uint64_t reason_flags) NO_SYSCALL_STUB; }
521	{ void abort_with_payload(uint32_t reason_namespace, uint64_t reason_code, void *payload, uint32_t payload_size, const char *reason_string, uint64_t reason_flags) NO_SYSCALL_STUB; }
522	{ int necp_session_open(int flags); }
523	{ int necp_session_action(int necp_fd, uint32_t action, uint8_t *in_buffer, size_t in_buffer_length, uint8_t *out_buffer, size_t out_buffer_length); }
524	{ int setattrlistat(int fd, const char *path, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, uint32_t options); }
525	{ int net_qos_guideline(struct net_qos_param *param, uint32_t param_len); }
526	{ int fmount(const char *type, int fd, int flags, void *data); }
527	{ int ntp_adjtime(struct timex *tp); }
528	{ int ntp_gettime(struct ntptimeval *ntvp); }
529	{ int os_fault_with_payload(uint32_t reason_namespace, uint64_t reason_code, void *payload, uint32_t payload_size, const char *reason_string, uint64_t reason_flags); }
*/
